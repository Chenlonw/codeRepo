import glob, os, sys, re, string, py_compile

# The following adds all SCons SConscript API to the globals of this module.
import SCons
version = map(int,string.split(SCons.__version__,'.')[:3])
if version[0] >= 1  or version[1] >= 97 or \
   (version[1] == 96 and version[2] >= 90):
    from SCons.Script import *
else:  # old style
    import SCons.Script.SConscript
    globals().update(SCons.Script.SConscript.BuildDefaultGlobals())

################################################################################

# Constants used in multiple functions. Internal to module.

__py_success = 0 # user-defined
__include = re.compile(r'#include\s*\"([^\"]+)\.h\"')
__local_include = re.compile(r'\s*\#include\s*\"([^\"]+)')


def __included(node,env,path):
    file = os.path.basename(str(node))
    file = re.sub('\.[^\.]+$','',file)
    contents = node.get_contents()
    includes = __include.findall(contents)
    if file in includes:
        includes.remove(file)
    return map(lambda x: x + '.h',includes)

Include = Scanner(name='Include', function=__included, skeys=['.c'])

################################################################################

def __header(target=None,source=None,env=None):
    'generate a header file'
    inp = open(str(source[0]),'r')
    text = string.join(inp.readlines(),'')
    inp.close()
    file = str(target[0])
    prefix = env.get('prefix','')
    define = prefix + string.translate(os.path.basename(file),
                                       string.maketrans('.','_'))
    out = open(file,'w')
    out.write('/* This file is automatically generated. DO NOT EDIT! */\n\n')
    out.write('#ifndef _' + define + '\n')
    out.write('#define _' + define + '\n\n')
    toheader = re.compile(r'\n((?:\n[^\n]+)+)\n'
                          '\s*\/\*(\^|\<(?:[^>]|\>[^*]|\>\*[^/])*\>)\*\/')
    kandr = re.compile(r'\s*\{?\s*$') # K&R style function defs end with {
    for extract in toheader.findall(text):
        if extract[1] == '^':
            out.write(extract[0]+'\n\n')
        else:
            function = kandr.sub('',extract[0])
            out.write(function+';\n')
            out.write('/*'+extract[1]+'*/\n\n')
    out.write('#endif\n')
    out.close()
    return __py_success

Header = Builder (action = Action(__header, varlist=['prefix']),
                  src_suffix='.c',suffix='.h')

################################################################################

def __placeholder(target=None,source=None,env=None):
    filename = str(target[0])
    out = open(filename,'w')
    var = env.get('var')
    out.write('#!/usr/bin/env python\n')
    out.write('import sys\n\n')
    out.write('sys.stderr.write(\'\'\'\n%s is not installed.\n')
    if var:
        out.write('Check $RSFROOT/share/madagascar/etc/config.py for ' + var)
        out.write('\nand reinstall if necessary.')
    message = env.get('message')
    if message:
        out.write(message)
    package = env.get('package')
    if package:
        out.write('\nPossible missing packages: ' + package)
    out.write('\n\'\'\' % sys.argv[0])\nsys.exit(1)\n')
    out.close()
    os.chmod(filename,0775)
    return __py_success

Place = Builder (action = Action(__placeholder,varlist=['var','package']))


################################################################################

def Debug():
    'Environment for debugging'
    env = Environment()
    env.SConsignFile(None)
    env.Append(BUILDERS={'Include':Header,
                         'Place':Place},
               SCANNERS=[Include])
    return env

################################################################################
def combineheader(library='nothing'):

    print 'start to combine'
    toheader = re.compile(r'\n((?:\n[^\n]+)+)\n'
                          '\s*\/\*(\^|\<(?:[^>]|\>[^*]|\>\*[^/])*\>)\*\/')
    kandr = re.compile(r'\s*\{?\s*$')

    with open('chlwang.h', 'w') as outp:
        outp.write('/* This file is automatically generated. DO NOT EDIT! */\n\n')
        outp.write('#ifndef _' + 'chlwang_h' + '\n')
        outp.write('#define _' + 'chlwang_h' + '\n')
        for header in os.listdir("./"):
            if header.endswith(".h"):
                with open(header, 'r') as inp:
                    text = string.join(inp.readlines(),'')
                    for extract in toheader.findall(text):
                        if extract[1] == '^':
                            outp.write(extract[0]+'\n\n')
                            print extract[0]
                        else:
                            function = kandr.sub('', extract[0])
                            outp.write(function+'\n')
                            outp.write('/*'+extract[1]+'*/\n\n')

        outp.write('#endif \n')
